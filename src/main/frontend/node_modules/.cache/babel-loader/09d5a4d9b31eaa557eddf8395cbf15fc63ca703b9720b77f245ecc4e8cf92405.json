{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHaveTextContent = toHaveTextContent;\nvar _utils = require(\"./utils\");\nfunction toHaveTextContent(node, checkWith) {\n  var _this = this;\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    normalizeWhitespace: true\n  };\n  (0, _utils.checkNode)(node, toHaveTextContent, this);\n  var textContent = options.normalizeWhitespace ? (0, _utils.normalize)(node.textContent) : node.textContent.replace(/\\u00a0/g, ' '); // Replace &nbsp; with normal spaces\n\n  var checkingWithEmptyString = textContent !== '' && checkWith === '';\n  return {\n    pass: !checkingWithEmptyString && (0, _utils.matches)(textContent, checkWith),\n    message: function message() {\n      var to = _this.isNot ? 'not to' : 'to';\n      return (0, _utils.getMessage)(_this, _this.utils.matcherHint(\"\".concat(_this.isNot ? '.not' : '', \".toHaveTextContent\"), 'element', ''), checkingWithEmptyString ? \"Checking with empty string will always match, use .toBeEmptyDOMElement() instead\" : \"Expected element \".concat(to, \" have text content\"), checkWith, 'Received', textContent);\n    }\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","toHaveTextContent","_utils","require","node","checkWith","_this","options","arguments","length","undefined","normalizeWhitespace","checkNode","textContent","normalize","replace","checkingWithEmptyString","pass","matches","message","to","isNot","getMessage","utils","matcherHint","concat"],"sources":["/Users/jihyun/Desktop/IdeaProjects/Kumoh-CodeReviewCommunity/src/main/frontend/node_modules/@testing-library/jest-dom/dist/to-have-text-content.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHaveTextContent = toHaveTextContent;\nvar _utils = require(\"./utils\");\nfunction toHaveTextContent(node, checkWith, options = {\n  normalizeWhitespace: true\n}) {\n  (0, _utils.checkNode)(node, toHaveTextContent, this);\n  const textContent = options.normalizeWhitespace ? (0, _utils.normalize)(node.textContent) : node.textContent.replace(/\\u00a0/g, ' '); // Replace &nbsp; with normal spaces\n\n  const checkingWithEmptyString = textContent !== '' && checkWith === '';\n  return {\n    pass: !checkingWithEmptyString && (0, _utils.matches)(textContent, checkWith),\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      return (0, _utils.getMessage)(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveTextContent`, 'element', ''), checkingWithEmptyString ? `Checking with empty string will always match, use .toBeEmptyDOMElement() instead` : `Expected element ${to} have text content`, checkWith, 'Received', textContent);\n    }\n  };\n}"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,iBAAiB,GAAGA,iBAAiB;AAC7C,IAAIC,MAAM,GAAGC,OAAO,CAAC,SAAS,CAAC;AAC/B,SAASF,iBAAiBA,CAACG,IAAI,EAAEC,SAAS,EAEvC;EAAA,IAAAC,KAAA;EAAA,IAFyCC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG;IACpDG,mBAAmB,EAAE;EACvB,CAAC;EACC,CAAC,CAAC,EAAET,MAAM,CAACU,SAAS,EAAER,IAAI,EAAEH,iBAAiB,EAAE,IAAI,CAAC;EACpD,IAAMY,WAAW,GAAGN,OAAO,CAACI,mBAAmB,GAAG,CAAC,CAAC,EAAET,MAAM,CAACY,SAAS,EAAEV,IAAI,CAACS,WAAW,CAAC,GAAGT,IAAI,CAACS,WAAW,CAACE,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,CAAC;;EAEtI,IAAMC,uBAAuB,GAAGH,WAAW,KAAK,EAAE,IAAIR,SAAS,KAAK,EAAE;EACtE,OAAO;IACLY,IAAI,EAAE,CAACD,uBAAuB,IAAI,CAAC,CAAC,EAAEd,MAAM,CAACgB,OAAO,EAAEL,WAAW,EAAER,SAAS,CAAC;IAC7Ec,OAAO,EAAE,SAAAA,QAAA,EAAM;MACb,IAAMC,EAAE,GAAGd,KAAI,CAACe,KAAK,GAAG,QAAQ,GAAG,IAAI;MACvC,OAAO,CAAC,CAAC,EAAEnB,MAAM,CAACoB,UAAU,EAAEhB,KAAI,EAAEA,KAAI,CAACiB,KAAK,CAACC,WAAW,IAAAC,MAAA,CAAInB,KAAI,CAACe,KAAK,GAAG,MAAM,GAAG,EAAE,yBAAsB,SAAS,EAAE,EAAE,CAAC,EAAEL,uBAAuB,4GAAAS,MAAA,CAA4GL,EAAE,uBAAoB,EAAEf,SAAS,EAAE,UAAU,EAAEQ,WAAW,CAAC;IAC5T;EACF,CAAC;AACH"},"metadata":{},"sourceType":"script","externalDependencies":[]}