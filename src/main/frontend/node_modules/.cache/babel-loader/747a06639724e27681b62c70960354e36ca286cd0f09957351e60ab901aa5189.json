{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/jihyun/Desktop/IdeaProjects/Kumoh-CodeReviewCommunity/src/main/frontend/node_modules/@babel/runtime/helpers/slicedToArray.js\").default;\nvar _defineProperty = require(\"/Users/jihyun/Desktop/IdeaProjects/Kumoh-CodeReviewCommunity/src/main/frontend/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nvar _toConsumableArray = require(\"/Users/jihyun/Desktop/IdeaProjects/Kumoh-CodeReviewCommunity/src/main/frontend/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHaveFormValues = toHaveFormValues;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _isEqualWith = _interopRequireDefault(require(\"lodash/isEqualWith\"));\nvar _uniq = _interopRequireDefault(require(\"lodash/uniq\"));\nvar _css = _interopRequireDefault(require(\"css.escape\"));\nvar _utils = require(\"./utils\");\n// Returns the combined value of several elements that have the same name\n// e.g. radio buttons or groups of checkboxes\nfunction getMultiElementValue(elements) {\n  var types = (0, _uniq.default)(elements.map(function (element) {\n    return element.type;\n  }));\n  if (types.length !== 1) {\n    throw new Error('Multiple form elements with the same name must be of the same type');\n  }\n  switch (types[0]) {\n    case 'radio':\n      {\n        var theChosenOne = elements.find(function (radio) {\n          return radio.checked;\n        });\n        return theChosenOne ? theChosenOne.value : undefined;\n      }\n    case 'checkbox':\n      return elements.filter(function (checkbox) {\n        return checkbox.checked;\n      }).map(function (checkbox) {\n        return checkbox.value;\n      });\n    default:\n      // NOTE: Not even sure this is a valid use case, but just in case...\n      return elements.map(function (element) {\n        return element.value;\n      });\n  }\n}\nfunction getFormValue(container, name) {\n  var elements = _toConsumableArray(container.querySelectorAll(\"[name=\\\"\".concat((0, _css.default)(name), \"\\\"]\")));\n  /* istanbul ignore if */\n  if (elements.length === 0) {\n    return undefined; // shouldn't happen, but just in case\n  }\n\n  switch (elements.length) {\n    case 1:\n      return (0, _utils.getSingleElementValue)(elements[0]);\n    default:\n      return getMultiElementValue(elements);\n  }\n}\n\n// Strips the `[]` suffix off a form value name\nfunction getPureName(name) {\n  return /\\[\\]$/.test(name) ? name.slice(0, -2) : name;\n}\nfunction getAllFormValues(container) {\n  var names = Array.from(container.elements).map(function (element) {\n    return element.name;\n  });\n  return names.reduce(function (obj, name) {\n    return (0, _extends2.default)({}, obj, _defineProperty({}, getPureName(name), getFormValue(container, name)));\n  }, {});\n}\nfunction toHaveFormValues(formElement, expectedValues) {\n  var _this = this;\n  (0, _utils.checkHtmlElement)(formElement, toHaveFormValues, this);\n  if (!formElement.elements) {\n    // TODO: Change condition to use instanceof against the appropriate element classes instead\n    throw new Error('toHaveFormValues must be called on a form or a fieldset');\n  }\n  var formValues = getAllFormValues(formElement);\n  return {\n    pass: Object.entries(expectedValues).every(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n        name = _ref3[0],\n        expectedValue = _ref3[1];\n      return (0, _isEqualWith.default)(formValues[name], expectedValue, _utils.compareArraysAsSet);\n    }),\n    message: function message() {\n      var to = _this.isNot ? 'not to' : 'to';\n      var matcher = \"\".concat(_this.isNot ? '.not' : '', \".toHaveFormValues\");\n      var commonKeyValues = Object.keys(formValues).filter(function (key) {\n        return expectedValues.hasOwnProperty(key);\n      }).reduce(function (obj, key) {\n        return (0, _extends2.default)({}, obj, _defineProperty({}, key, formValues[key]));\n      }, {});\n      return [_this.utils.matcherHint(matcher, 'element', ''), \"Expected the element \".concat(to, \" have form values\"), _this.utils.diff(expectedValues, commonKeyValues)].join('\\n\\n');\n    }\n  };\n}","map":{"version":3,"names":["_slicedToArray","require","default","_defineProperty","_toConsumableArray","_interopRequireDefault","Object","defineProperty","exports","value","toHaveFormValues","_extends2","_isEqualWith","_uniq","_css","_utils","getMultiElementValue","elements","types","map","element","type","length","Error","theChosenOne","find","radio","checked","undefined","filter","checkbox","getFormValue","container","name","querySelectorAll","concat","getSingleElementValue","getPureName","test","slice","getAllFormValues","names","Array","from","reduce","obj","formElement","expectedValues","_this","checkHtmlElement","formValues","pass","entries","every","_ref2","_ref3","expectedValue","compareArraysAsSet","message","to","isNot","matcher","commonKeyValues","keys","key","hasOwnProperty","utils","matcherHint","diff","join"],"sources":["/Users/jihyun/Desktop/IdeaProjects/Kumoh-CodeReviewCommunity/src/main/frontend/node_modules/@testing-library/jest-dom/dist/to-have-form-values.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHaveFormValues = toHaveFormValues;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _isEqualWith = _interopRequireDefault(require(\"lodash/isEqualWith\"));\nvar _uniq = _interopRequireDefault(require(\"lodash/uniq\"));\nvar _css = _interopRequireDefault(require(\"css.escape\"));\nvar _utils = require(\"./utils\");\n// Returns the combined value of several elements that have the same name\n// e.g. radio buttons or groups of checkboxes\nfunction getMultiElementValue(elements) {\n  const types = (0, _uniq.default)(elements.map(element => element.type));\n  if (types.length !== 1) {\n    throw new Error('Multiple form elements with the same name must be of the same type');\n  }\n  switch (types[0]) {\n    case 'radio':\n      {\n        const theChosenOne = elements.find(radio => radio.checked);\n        return theChosenOne ? theChosenOne.value : undefined;\n      }\n    case 'checkbox':\n      return elements.filter(checkbox => checkbox.checked).map(checkbox => checkbox.value);\n    default:\n      // NOTE: Not even sure this is a valid use case, but just in case...\n      return elements.map(element => element.value);\n  }\n}\nfunction getFormValue(container, name) {\n  const elements = [...container.querySelectorAll(`[name=\"${(0, _css.default)(name)}\"]`)];\n  /* istanbul ignore if */\n  if (elements.length === 0) {\n    return undefined; // shouldn't happen, but just in case\n  }\n\n  switch (elements.length) {\n    case 1:\n      return (0, _utils.getSingleElementValue)(elements[0]);\n    default:\n      return getMultiElementValue(elements);\n  }\n}\n\n// Strips the `[]` suffix off a form value name\nfunction getPureName(name) {\n  return /\\[\\]$/.test(name) ? name.slice(0, -2) : name;\n}\nfunction getAllFormValues(container) {\n  const names = Array.from(container.elements).map(element => element.name);\n  return names.reduce((obj, name) => (0, _extends2.default)({}, obj, {\n    [getPureName(name)]: getFormValue(container, name)\n  }), {});\n}\nfunction toHaveFormValues(formElement, expectedValues) {\n  (0, _utils.checkHtmlElement)(formElement, toHaveFormValues, this);\n  if (!formElement.elements) {\n    // TODO: Change condition to use instanceof against the appropriate element classes instead\n    throw new Error('toHaveFormValues must be called on a form or a fieldset');\n  }\n  const formValues = getAllFormValues(formElement);\n  return {\n    pass: Object.entries(expectedValues).every(([name, expectedValue]) => (0, _isEqualWith.default)(formValues[name], expectedValue, _utils.compareArraysAsSet)),\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      const matcher = `${this.isNot ? '.not' : ''}.toHaveFormValues`;\n      const commonKeyValues = Object.keys(formValues).filter(key => expectedValues.hasOwnProperty(key)).reduce((obj, key) => (0, _extends2.default)({}, obj, {\n        [key]: formValues[key]\n      }), {});\n      return [this.utils.matcherHint(matcher, 'element', ''), `Expected the element ${to} have form values`, this.utils.diff(expectedValues, commonKeyValues)].join('\\n\\n');\n    }\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}